const TelegramBot = require('node-telegram-bot-api');
const PDFDocument = require('pdfkit');
const fs = require('fs');

const token = '8067741459:AAF4VFQ5_ntev-6Yxwad0SO4b4xB4472Rxo';
const bot = new TelegramBot(token, { polling: true });

const QUESTIONS = [
  { text: '–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É?', type: 'number' },
  { text: '–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?', type: 'number' },
  { text: '–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞ (‚Ç¨)?', type: 'number' },
  { text: '–ì–æ–¥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚Ç¨)?', type: 'number' },
  { text: '–ï—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞?', type: 'bool' },
  { text: '–ï—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã?', type: 'bool' },
  { text: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?', type: 'bool' },
  { text: '–û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ KPI?', type: 'bool' },
  { text: '–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è?', type: 'choice' },
  { text: "–ï—Å—Ç—å –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –±–∏–∑–Ω–µ—Å '—É–ø—ë—Ä—Å—è'?", type: 'bool' },
  { text: '–ï—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞?', type: 'bool' },
  { text: '–ï—Å—Ç—å –ª–∏ –≤—ã—Å–æ–∫–∞—è —Ç–µ–∫—É—á–µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞?', type: 'bool' },
];


const userStates = {};

const YES_NO_KEYBOARD = {
  reply_markup: {
    keyboard: [['–¥–∞', '–Ω–µ—Ç']],
    one_time_keyboard: true,
    resize_keyboard: true,
  },
};

const CHOICE_KEYBOARD = {
  reply_markup: {
    keyboard: [['–µ–∂–µ–º–µ—Å—è—á–Ω–æ', '—Ä–∞–∑ –≤ –≥–æ–¥', '–ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏']],
    one_time_keyboard: true,
    resize_keyboard: true,
  },
};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = {
    step: 0,
    answers: [],
    messages: [msg.message_id],
  };
  askNextQuestion(chatId, msg.message_id);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const state = userStates[chatId];

  if (!state || msg.text.startsWith('/')) return;

  state.messages.push(msg.message_id);

  const current = QUESTIONS[state.step];
  const text = msg.text.trim();

  if (current.type === 'number') {
    const num = parseFloat(text);
    if (isNaN(num) || num < 0) {
      const res = await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:');
      state.messages.push(res.message_id);
      return;
    }
    state.answers.push(num);
  } else if (current.type === 'bool') {
    if (!['–¥–∞', '–Ω–µ—Ç'].includes(text.toLowerCase())) {
      const res = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ \'–¥–∞\' –∏–ª–∏ \'–Ω–µ—Ç\'.', YES_NO_KEYBOARD);
      state.messages.push(res.message_id);
      return;
    }
    state.answers.push(text);
  } else if (current.type === 'choice') {
    if (!['–µ–∂–µ–º–µ—Å—è—á–Ω–æ', '—Ä–∞–∑ –≤ –≥–æ–¥', '–ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏'].includes(text.toLowerCase())) {
      const res = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', CHOICE_KEYBOARD);
      state.messages.push(res.message_id);
      return;
    }
    state.answers.push(text);
  }

  state.step++;

  if (state.step >= QUESTIONS.length) {
    for (const messageId of state.messages) {
      try { await bot.deleteMessage(chatId, messageId); } catch (e) { }
    }
    const analysis = analyzeBusiness(state.answers);

    // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    await bot.sendMessage(chatId, analysis, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart' }]
        ]
      }
    });

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF
    const pdfPath = `./Result.pdf`;
    await generateBusinessPDF(analysis, pdfPath, state.answers);
    await bot.sendDocument(chatId, pdfPath);
    fs.unlinkSync(pdfPath);

    delete userStates[chatId];
  } else {
    askNextQuestion(chatId);
  }
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  if (query.data === 'restart') {
    userStates[chatId] = {
      step: 0,
      answers: [],
      messages: []
    };
    await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!');
    askNextQuestion(chatId);
  }
  await bot.answerCallbackQuery({ callback_query_id: query.id });
});

function askNextQuestion(chatId) {
  const state = userStates[chatId];
  const current = QUESTIONS[state.step];
  let keyboard = {};

  if (current.type === 'bool') keyboard = YES_NO_KEYBOARD;
  else if (current.type === 'choice') keyboard = CHOICE_KEYBOARD;
  else keyboard = { reply_markup: { remove_keyboard: true } };

  bot.sendMessage(chatId, current.text, keyboard).then((res) => {
    state.messages.push(res.message_id);
  });
}

function generateBusinessPDF(resultText, outputPath, answers) {
  return new Promise((resolve) => {
    const doc = new PDFDocument({
      font: 'fonts/DejaVuSans.ttf',
      size: 'A4',
      margin: 50
    });

    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);

    doc.font('fonts/DejaVuSans.ttf');
    doc.fontSize(20).text('üß† CORE-–°–∫–∞–Ω –±–∏–∑–Ω–µ—Å–∞', { align: 'center' });
    doc.moveDown();

    doc.fontSize(14).text('–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { underline: true });
    QUESTIONS.forEach((q, index) => {
      const answer = answers[index] !== undefined ? answers[index] : '‚Äî';
      doc.fontSize(12).text(`${index + 1}. ${q.text} ${answer}`);
    });

    doc.moveDown();
    doc.fontSize(14).text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:', { underline: true });
    doc.moveDown();
    doc.fontSize(12).text(resultText, { align: 'left', lineGap: 6 });

    doc.end();

    stream.on('finish', () => resolve(outputPath));
  });
}


function analyzeBusiness(ans) {
  try {
    const [years, staff, revenue, expenses, ...rest] = ans;
    const [team, processes, marketing, kpi, decisions, growth_block, income_sources, high_turnover] = rest.map((v, i) => {
      if (i === 4) return v.toLowerCase();
      return v.toLowerCase() === '–¥–∞';
    });

    let maturity_score = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
    let risks = [];
    
    // üßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –±–∏–∑–Ω–µ—Å–∞
    const idealAge = 3;
    let ageCoefficient = 1;
    
    if (years < idealAge) {
      // –î–ª—è –±–∏–∑–Ω–µ—Å–∞ –º–ª–∞–¥—à–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
      // –û—Ç 0.85 –ø—Ä–∏ 0 –ª–µ—Ç –¥–æ 1 –ø—Ä–∏ idealAge –ª–µ—Ç
      ageCoefficient = 0.85 + (0.15 * (years / idealAge));
    } else if (years > idealAge) {
      // –î–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å—Ç–∞—Ä—à–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
      // –û—Ç 1 –ø—Ä–∏ idealAge –¥–æ 0.7 –ø—Ä–∏ 15+ –ª–µ—Ç
      const ageDiff = Math.min(years - idealAge, 12); // –†–∞–∑–Ω–∏—Ü–∞ –º–∞–∫—Å–∏–º—É–º 12 –ª–µ—Ç (15 - 3)
      ageCoefficient = 1 - (0.3 * (ageDiff / 12));
    }
    
    // üßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    const idealStaff = 10;
    let staffCoefficient = 1;
    
    if (staff < 3) {
      staffCoefficient = 0.7;
      risks.push('–º–∞–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (<3)');
    } else if (staff < idealStaff) {
      // –û—Ç 0.6 –ø—Ä–∏ 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–æ 1 –ø—Ä–∏ 10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
      staffCoefficient = 0.7 + (0.4 * ((staff - 3) / (idealStaff - 3)));
    } else if (staff > 20) {
      // –û—Ç 1 –ø—Ä–∏ 20 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–æ 0.7 –ø—Ä–∏ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
      staffCoefficient = 0.8 + (0.3 * Math.max(0, (30 - staff) / 10));
      if (staff > 30) {
        staffCoefficient = 0.8;
        risks.push('–∏–∑–±—ã—Ç–æ—á–Ω—ã–π —à—Ç–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (>30)');
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    maturity_score *= ageCoefficient * staffCoefficient;
    
    if (years < 1) risks.push('–º–æ–ª–æ–¥–æ–π –±–∏–∑–Ω–µ—Å (<1 –≥–æ–¥–∞)');
    if (years > 15) risks.push('—É—Å—Ç–∞—Ä–µ–≤—à–∞—è –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å (>15 –ª–µ—Ç)');

    const profit_margin = revenue > 0 ? ((revenue - expenses) / revenue) * 100 : 0;

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç 0.4 (–ø—Ä–∏ 1%) –¥–æ 1 (–ø—Ä–∏ 100%)
    let marginCoefficient = 1;

    if (profit_margin <= 1) {
      marginCoefficient = 0.4;
    } else if (profit_margin < 50) {
      marginCoefficient = 0.4 + 0.6 * ((profit_margin - 1) / 49);
    } else if (profit_margin > 50) {
      marginCoefficient = 1;
    }

    maturity_score *= marginCoefficient;

    if (profit_margin < 10) {
      risks.push('–Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∏–∑–Ω–µ—Å–∞
    if (!team) {
      maturity_score *= 0.9;
      risks.push('–Ω–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    if (!processes) {
      maturity_score *= 0.9;
      risks.push('–±–∏–∑–Ω–µ—Å –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    }
    
    if (!marketing) {
      maturity_score *= 0.9;
      risks.push('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥');
    }
    
    if (!kpi) {
      maturity_score *= 0.9;
      risks.push('–Ω–µ—Ç KPI');
    }

    if (decisions !== '–µ–∂–µ–º–µ—Å—è—á–Ω–æ') {
      maturity_score *= 0.9;
      if (decisions !== '—Ä–∞–∑ –≤ –≥–æ–¥') {
        risks.push('—Ö–∞–æ—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π');
      }
    }

    if (growth_block) {
      maturity_score *= 0.9;
      risks.push('–æ—â—É—â–∞–µ—Ç—Å—è –ø–æ—Ç–æ–ª–æ–∫ —Ä–æ—Å—Ç–∞');
    }

    if (!income_sources) {
      maturity_score *= 0.9;
      risks.push('–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞');
    }

    if (high_turnover) {
      maturity_score *= 0.9;
      risks.push('–≤—ã—Å–æ–∫–∞—è —Ç–µ–∫—É—á–µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞');
    }


    level = 'üî¥';
    textLevel = '–ö–†–ê–°–ù–´–ô';
    summary = '–í—ã–∂–∏–≤–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å. –í—ã—Å–æ–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –º–æ–¥–µ–ª–∏.';
    
    if (maturity_score > 0.85) {
      level = 'üü¢'; textLevel = '–ó–ï–õ–Å–ù–´–ô';
      summary = '–í—ã—Å–æ–∫–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å. –ë–∏–∑–Ω–µ—Å –≥–æ—Ç–æ–≤ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é.';
    } else if (maturity_score > 0.65) {
      level = 'üü°'; textLevel = '–ñ–Å–õ–¢–´–ô';
      summary = '–ë–∏–∑–Ω–µ—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –Ω–æ –Ω–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.';
    } else if (maturity_score > 0.40) {
      level = 'üü†'; textLevel = '–û–†–ê–ù–ñ–ï–í–´–ô';
      summary = '–ë–∏–∑–Ω–µ—Å —Ö—Ä—É–ø–∫–∏–π: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å. –£—è–∑–≤–∏–º –∫ –≤–Ω–µ—à–Ω–∏–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–∏—Å–∫–∞–º.';
    } else if (maturity_score > 0.25) {
      level = 'üî¥'; textLevel = '–ö–†–ê–°–ù–´–ô';
      summary = '–í—ã–∂–∏–≤–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å. –í—ã—Å–æ–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –º–æ–¥–µ–ª–∏.';
    }
    
    return `üß† CORE-–°–∫–∞–Ω –ó–∞–≤–µ—Ä—à—ë–Ω

–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${maturity_score.toFixed(2) * 100}/100
–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${level} ${textLevel}

üìå –í—ã–≤–æ–¥:
${summary}`;
  } catch (e) {
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.';
  }
}
